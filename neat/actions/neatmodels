#!/usr/bin/env python3
import os
import sys
import glob
import shutil
import argparse
import importlib


# def loadNEATCorrectPath():
#     """
#     Loads neat from a custom paths list where the current working directory
#     only occurs as the final path, so that neat is first loaded from the install
#     path and only from the current path if we are working in development mode.

#     Required to run `compilechannels default` from package root directory after
#     installation via `setup.py`
#     """
#     # get new paths list without the current working directory
#     current_path = os.path.realpath(os.getcwd())
#     paths = [path for path in sys.path if os.path.realpath(path) != current_path]
#     # append current path to paths list
#     paths += [current_path]

#     # load module with importlib according to
#     # https://stackoverflow.com/questions/35288021/what-is-the-equivalent-of-imp-find-module-in-importlib
#     # and to
#     # https://import-sig.python.narkive.com/JW8eIKSg/how-best-to-replace-imp-load-module
#     neatspec = importlib.machinery.PathFinder().find_spec("neat", paths)
#     neat = neatspec.loader.load_module()
#     neatspec.loader.exec_module(neat)

#     return neat


# neat = loadNEATCorrectPath()
import neat
from neat.actions.list import _list_models
from neat.actions.uninstall import _uninstall_models
from neat.actions.install import _install_models


def parse_cmd_args():
    parser = argparse.ArgumentParser(
        description="The program compiles and installs neat ion channels models for "
             "simulators of neuronal dynamics.\n"
             "It can also list installed models and uninstall them.\n"
             "Currently, 'nest' and 'neuron' are supported as simulators"
    )

    parser.add_argument('action',
        help="Whether to install a model, list all installed models or "
             "uninstall a model",
        choices=["install", "list", "uninstall"]
    )
    parser.add_argument("name",
        nargs="*",
        default=[""],
        help="(i) If the [action] is 'install',"
             "specifies the name of the to be compiled model.\n"
             "If not provided, the name of the last element in [--path] will be taken.\n"
             "(ii) If the [action] is 'list', the argument is ignored.\n"
             "(iii) If the [action] is 'uninstall',"
             "specifies the name of the be removed model.\n"
             "If not provided, nothing will be removed. "
             "Should be a pure name, not a path.\n"
             "At most one argument can be provided."
    )
    parser.add_argument("-s", "--simulator",
        nargs="*",
        choices=["neuron", "nest"],
        default=["neuron"],
        help="The simulators to which the action is applied. \n"
             "Default is \'neuron\'"
    )
    parser.add_argument("--neuronresource",
        default=os.path.join(path_neat, "tools/simtools/neuron/mech_storage/"),
        help="Path to directory containing additional .mod-file mechanisms "
             "(e.g. synapses) that will be compiled together with the "
             "generated ion channel mod files.\n"\
             "Only used when the [action] is 'install'."
    )
    parser.add_argument("--nestresource",
        default=os.path.join(path_neat, "tools/simtools/nest/default_syns.nestml"),
        help="Path to directory containing additional .mod-file mechanisms "
             "(e.g. synapses) that will be compiled together with the "
             "generated ion channel mod files.\n"
             "Only used when the [action] is 'install'."
    )
    parser.add_argument("-p", "--path",
        nargs="*",
        default=[""],
        help="Path where the program searches for ion channels to compile, "
             "may be one or more directories, and/or one or more python files. \n\n"
             "For each directory provided, the program will search all python "
             "files in that directory for all subclasses of `neat.IonChannel` \n\n"
             "For each python file, the program will search for all subclasses "
             "of `neat.IonChannel in that file.\n\n"
             "If nothing is provided, the program searches the current working "
             "directory. \n\n"
             "If the argument `default` is provided. The program compiles the "
             "default ion channels that are used for testing. \n\n"
             "Only used when the [action] is 'install'."
    )
    return parser.parse_args()


# set all neat dependent path variables
path_neat = neat.__path__[0]
path_for_neuron_compilation = os.path.join(path_neat, 'tools/simtools/neuron/tmp/')
path_for_nestml_compilation = os.path.join(path_neat, 'tools/simtools/nest/tmp/')
# parse the commandline args
cmd_args = parse_cmd_args()

if len(cmd_args.name) > 1:
    raise IOError(
        "At most one [name] argument can be provided"
    )
else:
    cmd_args.name = cmd_args.name[0]

if cmd_args.action == 'install':
    _install_models(cmd_args.name,
        path_neat=path_neat,
        channel_path_arg=cmd_args.path,
        simulators=cmd_args.simulator,
        path_neuronresource=cmd_args.neuronresource,
        path_nestresource=cmd_args.nestresource,
    )
elif cmd_args.action == 'list':
    _list_models(
        path_neat=path_neat,
        simulators=cmd_args.simulator
    )
elif cmd_args.action == 'uninstall':
    _uninstall_models(cmd_args.name,
        path_neat=path_neat,
        simulators=cmd_args.simulator
    )

